(ns aoc2017.core
  (:require [clojure.string :as string]
            [clojure.edn :as edn]
            [clojure.math.combinatorics :as combo]))

;; Day 1
(defn digitize [d]
  (->> d str (map #(- (int %) (int \0)))))

(defn solve-captcha [d]
  (->> d
       digitize
       (#(concat % [(first %)]))
       (partition 2 1)
       (filter (fn [[a b]] (= a b)))
       (map first)
       (reduce +)))

(defn solve-captcha [d]
  (as-> d $
    (digitize $)
    (concat $ [(first $)])
    (partition 2 1 $)
    (filter (fn [[a b]] (= a b)) $)
    (map first $)
    (reduce + $)))

(defn solve-halfway-captcha [d]
  (->> d
       digitize
       (#(map vector % (->> (concat % %)
                            (drop (/ (count %) 2))
                            (take (count %)))))
       (filter (fn [[a b]] (= a b)))
       (map first)
       (reduce +)))

;; Day 2
(defn read-matrix [m]
  (->> m
       (#(string/split % #"\n"))
       (map #(string/split % #"\s+"))
       (map #(map edn/read-string %))
       ))

(defn checksum-matrix [m]
  (->> m
       read-matrix
       (map #(- (apply max %) (apply min %)))
       (reduce +)))

(defn even-checksum-row [r]
  (->> r
       (#(combo/combinations % 2))
       (some (fn [[a b]]
               (cond (zero? (mod a b)) (/ a b)
                     (zero? (mod b a)) (/ b a)
                     :else             nil)))))

(defn even-checksum-matrix [m]
  (->> m
       read-matrix
       (map even-checksum-row)
       (reduce +)))


(def day
